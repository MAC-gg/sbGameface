@model sbGameface.Models.Game

@{
    ViewData["Title"] = "Details";
}

<script type="text/javascript">
    class Repeater {
        constructor(container) {
            // check null
            if (!container) { return false; }

            // container should be a div id
            if (container.charAt(0) == "#") {
                container = container.substring(1);
            }

            this.container = document.getElementById(container);
            if (!this.container) {
                console.log("REPEATER ERROR - Couldn't find a container with the ID: '" + container + "'.");
                return false;
            }
            this.container.className = "repeater";

            // titlecontainer
            this.title = "Repeater";
            this.titleContainer = document.createElement("div");
            this.titleContainer.className = "repeater-titleContainer";

            // single items container
            // fill this container with items from extensions
            this.itemContainer = document.createElement("div");
            this.itemContainer.className = "repeater-itemContainer";
            this.itemContainer.innerHTML = "<div class='alert-container'>ERROR: There was an error loading the data connected to this field.</div>";

            // create container for create form
            // fill this container with fields from extension
            // temp form - emptied on successful entry - sync db called afterwards
            this.createContainer = document.createElement("div");
            this.createContainer.className = "repeater-createContainer hidden";

            // create add button - once
            this.btnCreate = document.createElement("button");
            this.btnCreate.className = "repeater-btnCreate";
            this.btnCreate.innerHTML = "<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" height=\"48\" viewBox=\"0 96 960 960\" width=\"48\"><path d=\"M450 856V606H200v-60h250V296h60v250h250v60H510v250h-60Z\"/></svg>";
            this.btnCreate.disabled = true;
            // create update button - add to single item template template
            this.btnUpdate = document.createElement("button");
            this.btnUpdate.className = "repeater-btnUpdate";
            this.btnUpdate.innerHTML = "<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" height = \"48\" viewBox = \"0 96 960 960\" width = \"48\" > <path d=\"M180 876h44l443-443-44-44-443 443v44Zm614-486L666 262l42-42q17-17 42-17t42 17l44 44q17 17 17 42t-17 42l-42 42Zm-42 42L248 936H120V808l504-504 128 128Zm-107-21-22-22 44 44-22-22Z\" /> </svg>";
            // create delete button - add to single item template template
            this.btnDelete = document.createElement("button");
            this.btnDelete.className = "repeater-btnDelete";
            this.btnDelete.innerHTML = "<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" height = \"48\" viewBox = \"0 96 960 960\" width = \"48\" > <path d=\"M261 936q-24.75 0-42.375-17.625T201 876V306h-41v-60h188v-30h264v30h188v60h-41v570q0 24-18 42t-42 18H261Zm438-630H261v570h438V306ZM367 790h60V391h-60v399Zm166 0h60V391h-60v399ZM261 306v570-570Z\" /> </svg>";
            // create refresh button - once
            this.btnRefresh = document.createElement("button");
            this.btnRefresh.className = "repeater-btnRefresh";
            this.btnRefresh.innerHTML = "<svg xmlns=\"http:\/\/www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 96 960 960\" width=\"48\"><path d=\"M167 896v-60h130l-15-12q-64-51-93-111t-29-134q0-106 62.5-190.5T387 272v62q-75 29-121 96.5T220 579q0 63 23.5 109.5T307 769l30 21V666h60v230H167Zm407-15v-63q76-29 121-96.5T740 573q0-48-23.5-97.5T655 388l-29-26v124h-60V256h230v60H665l15 14q60 56 90 120t30 123q0 106-62 191T574 881Z\"/></svg>";
            this.btnRefresh.disabled = true;
            // by default buttons are disabled

            this.createRepeater();

            // call refresh function
            // by default show 'no items found'
            // fill repeater-items container
            // end constructor
        }

        createRepeater () {

            // add title
            let titleHeaderContainer = document.createElement("h3");
            titleHeaderContainer.innerHTML = this.title;
            this.titleContainer.appendChild(titleHeaderContainer);
            // followed by refresh btn
            this.titleContainer.appendChild(this.btnRefresh);
            // add title container to repeater
            this.container.appendChild(this.titleContainer);

            let contentContainer = document.createElement("div");
            contentContainer.className = "repeater-contentContainer";
            
            // add singles container
            contentContainer.appendChild(this.itemContainer);
            // add create form
            contentContainer.appendChild(this.createContainer);
            // add create button
            contentContainer.appendChild(this.btnCreate);
            // add content container to repeater
            this.container.appendChild(contentContainer);
        }

        makeInput(field) {
            let input = "<input ";
            for (let prop in field) {
                input += prop + "='" + field[prop] + "' ";
            }
            input += "/>";
            return input;
        }

        // print html structure of the repeater
        // master-container
        //    message container
        //    title-container with refresh button
        //    repeater-items
        //    repeater-create
        //       create-form
        //       add button

        // recieve type of repeater
        // use extensions to configure buttons and set title
        // show nothing in repeater-items 
        //      create function for add button
        //      create function for update button
        //      create function for delete button
        //      create function for refresh button
        //      enable buttons once functionality is added
        // call print html function when all is set
    }

    class StatRepeater extends Repeater {
        constructor(container, GameId) {

            super(container);

            // fields
            this.GameIdProps = {
                type: "hidden",
                name: "GameId",
                class: "req",
                value: GameId
            };
            this.StatNameProps = {
                type: "text",
                name: "StatName",
                placeholder: "Stat Name",
                class: "req"
            };
            this.StatDescProps = {
                type: "text",
                name: "StatDesc",
                placeholder: "Stat Description",
                class: "req"
            };

            let GameIdInput = super.makeInput(GameIdProps);
            let StatNameInput = super.makeInput(StatNameProps);
            let StatDescInput = super.makeInput(StatNameProps);

            this.item = document.createElement("div");
            this.item.className = "repeater-item";
            this.item.innerHTML += StatNameInput;
            this.item.innerHTML += GameIdInput;
            this.item.innerHTML += StatDescInput;

            this.createContainer.appendChild(item);

            this.btnCreate.onclick = this.btnCreateOnClick.bind(this);
            this.btnRefresh.onclick = this.btnRefreshOnClick.bind(this);
            this.btnUpdate.onclick = this.btnUpdateOnClick.bind(this);
            this.btnDelete.onclick = this.btnDeleteOnClick.bind(this);

            this.btnCreate.disabled = false;
            this.btnRefresh.disabled = false;

            this.initFill();
        }

        initFill() {
            console.log("init fill");

            $.ajax({
                url: '/GameStat/GetGameStatList',
                type: 'GET',
                data: { GameId: @Model.Id },
                error: function () {
                    alert("Server access failure!");
                },
                success: function (data) {
                    console.log(data);
                    $.each(data, function (i, obj) {

                        StatNameProps["value"] = obj.statName;
                        StatDescProps["value"] = obj.statDesc;

                        // reset item HTML with above
                        this.item.innerHTML = super.makeInput(GameIdProps) + super.makeInput(StatNameProps) + super.makeInput(StatDescProps);

                        this.itemContainer.innerHTML += this.item;
                    });
                }
            });
        }

        btnCreateOnClick() {
            if (this.createContainer.classList.contains("hidden")) {
                this.createContainer.classList.remove("hidden");
                this.btnCreate.innerHTML = "Save";
            } else {
                console.log("add new stat");
                console.log("onsuccess hide create form, display message, refresh list");
                this.btnCreate.innerHTML = "<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" height=\"48\" viewBox=\"0 96 960 960\" width=\"48\"><path d=\"M450 856V606H200v-60h250V296h60v250h250v60H510v250h-60Z\"/></svg>";
                this.createContainer.classList.add("hidden");
            }
        }

        btnRefreshOnClick() {
            console.log("btnRefreshOnClick method");
            this.initFill();
        }

        btnUpdateOnClick() {
            console.log("btnUpdateOnClick method");
        }

        btnDeleteOnClick() {
            console.log("btnDeleteOnClick method");
        }
    }
</script>

<h1>Details</h1>

<div>
    <h4>Game</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TeamSize)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TeamSize)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Qs)
        </dt>
        <dd class="col-sm-10">
            @if (Model.Qs.Count() > 0)
            {
                @foreach (var Q in Model.Qs)
                {
                    <div class="repeater-single">
                        <input type="text" disabled value="@Q.Id" />
                        <input type="text" disabled value="@Q.GameId" />
                    </div>
                }
            }
            else
            {
                <p>Nothing to see here.</p>
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stats)
        </dt>
        <dd class="col-sm-10">
            <div class="repeater-container" data-repeater="GameStats">
                <div class="repeater-items">
                    @if (Model.Stats.Count() > 0)
                    {
                        @foreach (var Stat in Model.Stats)
                        {
                            <div class="repeater-single">
                                <input type="text" disabled value="@Stat.Id" />
                                <input type="text" disabled value="@Stat.GameId" />
                            </div>
                        }
                    }
                    else
                    {
                        <p>Nothing to see here.</p>
                    }
                </div>
                <div class="repeater-create-row">
                    <div id="RptCreateForm" class="hidden">
                        <input type="text" disabled name="CreateStatGameId" value="@Model.Id" class="required" />
                    </div>
                    <button id="BtnCreate" onclick="BtnCreateClick()">+ Add</button>
                </div>
            </div>
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stats)
        </dt>
        <dd class="col-sm-10">
            <div id="GameQRepeater"></div>
            <script type="text/javascript">
                let container = "GameQRepeater";
                let repeater = new StatRepeater(container, @Model.Id);
            </script>
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
<script type="text/javascript">
    function BtnCreateClick() {
        var BtnCreate = $("#BtnCreate");
        var RptCreateForm = $("#RptCreateForm");
        if(RptCreateForm.hasClass("hidden")) {
            RptCreateForm.removeClass("hidden");
            BtnCreate.html("Save");
            console.log("Add click");
            return;
        } else {
            // validate
            var ReqFields = $("#RptCreateForm input.required");
            console.log(ReqFields);
            ReqFields.map(function() {
                console.log(this.value);
                if (this.value == "") { this.className = "invalid"; console.log("invalid"); }
            });

            // get type of repeater

            
        }
    }
</script>
